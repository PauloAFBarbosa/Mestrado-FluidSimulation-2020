// Copyright (c) 2017-2018, Samuel Ivan Gunadi
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define WORK_GROUP_SIZE 32

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants

#define TIME_STEP 0.0001f

#define WALL_SIZEX 0.5
#define WALL_SIZEZ 0.5

uniform int Number_Particles;
uniform int Pause;
uniform float WALL_DAMPING;
uniform float time;
uniform float XMAX;
uniform float YMAX;
uniform float ZMAX;

uniform float XMIN;
uniform float YMIN;
uniform float ZMIN;

uniform float DECLIVE;
uniform float RESTITUTION;
uniform float TIMESTEP;
uniform vec4 GRAVITY;

uniform vec4 Ball;
uniform float BallSize;
uniform int COLLISIONTYPE;
uniform int computeGravity;

layout(std430, binding = 0) buffer Position
{
    vec4 position[];
};

layout(std430, binding = 1) buffer Velocity
{
    vec4 velocity[];
};

layout(std430, binding = 2) buffer Force
{
    vec4 force[];
};

layout(std430, binding = 3) buffer Density
{
    float density[];
};



layout(std430, binding = 4) buffer Acceleration
{
    vec4 acceleration[];
};

layout(std430, binding = 5) buffer Gravity
{
    vec4 gravity[];
};



layout(std430, binding = 6) buffer SurfaceTension
{
    vec4 surfaceTension[];
};

layout(std430, binding = 7) buffer Viscosity
{
    vec4 viscosity[];
};








void updateVelocity(vec4 velocity, vec4 unitSurfaceNormal, float penetrationDepth, out vec4 ret) {
    //ret = velocity - unitSurfaceNormal * (1 + RESTITUTION * penetrationDepth / (TIMESTEP * glm::length(velocity))) * glm::dot(velocity, unitSurfaceNormal);
    
    ret= velocity - unitSurfaceNormal * (1 + RESTITUTION * penetrationDepth / (TIMESTEP * length(velocity))) * dot(unitSurfaceNormal, velocity);
}

bool detectCollisionV2(in vec4 pos,in vec4 vel,in uint index,out int hitBall, out vec4 contactPoint, out vec4 unitSurfaceNormal,out vec4 retVelocity) {
    

   
    if (pos.x <= XMAX && pos.x >= XMIN && pos.y <= YMAX && pos.y >= YMIN && pos.z <= ZMAX && pos.z >= ZMIN){
            contactPoint=pos;
            retVelocity=vel;
            hitBall=0;
            return false;
    }


    contactPoint = pos;

    unitSurfaceNormal= vec4(0);

    int zx =0;
    retVelocity=vel;
    // desativar os limites no XX
    if (pos.x < XMIN) {
        zx=1;
            contactPoint.x = XMIN;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(1,0,0,0));
            

            
            
    }
    else if (pos.x > XMAX) {
        zx=1;
            contactPoint.x = XMAX;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(-1,0,0,0));
            

    }
    
    if (pos.y < YMIN) {
            contactPoint.y =YMIN;
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,1,0,0));
            
            
        }
        else if (pos.y > YMAX) {
            contactPoint.y =YMAX;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,-1,0,0));
            
            
        }
        
    
        if (pos.z < ZMIN) {
            zx=1;
            contactPoint.z =ZMIN;
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,0,1,0));
            
            
            
        }
        else if (pos.z > ZMAX) {
            zx=1;
            contactPoint.z =ZMAX;
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,0,-1,0));
            
             
        }

        
        
        float penetrationDepth = length(pos - contactPoint);
        if (COLLISIONTYPE == 0)
            retVelocity= vel-(2) * dot(unitSurfaceNormal, (vel))*unitSurfaceNormal;
        else
            retVelocity= vel -  (1+RESTITUTION *(penetrationDepth/(TIMESTEP*length(vel)))) * dot(unitSurfaceNormal, vel)*unitSurfaceNormal;
        //retVelocity *= RESTITUTION;
        
        //
        
        //retVelocity=retVelocity*RESTITUTION;
        hitBall=0;
        return true;
}

void main()
{
    if (Pause == 1)
        return;
    uint index = gl_GlobalInvocationID.x;

    if (index > Number_Particles)
        return;

    vec4 totalForce= vec4(0);

    //retirado surfaceTension
    // aqui se tiver GRAVITY * density cada particula vai ter uma gravidade diferente, e assim as de baixo sofrem mais gravidade (visto que tem mais gravidade)
    
    if (computeGravity==0)
        totalForce = force[index] + viscosity[index] + GRAVITY * 1000 + surfaceTension[index];
    else
        totalForce = force[index] + viscosity[index] + GRAVITY * density[index]+ surfaceTension[index];

    

    //employEulerIntegrator
    vec4 acc= (totalForce / density[index]);

    vec4 oldPosition = position[index];

    vec4 vel = velocity[index]*0.99 + acc * TIMESTEP;
    
    
    vec4 pos = oldPosition + vel * TIMESTEP;

    vec4 contactPoint= vec4(0);
    vec4 unitSurfaceNormal= vec4(0);
    vec4 retVolocity= vec4(0);
    //usado para saber se entrou em colis√£o com a bola, para aumentar o RESTITUTION
    int hitball=0;
    bool retcolision = detectCollisionV2(pos,vel,index,hitball, contactPoint, unitSurfaceNormal,retVolocity);


    position[index]=contactPoint;
    velocity[index]=retVolocity;
}