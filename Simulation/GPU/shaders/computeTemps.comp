#version 460

#define WORK_GROUP_SIZE 25

layout (local_size_x = WORK_GROUP_SIZE) in;

#define PARTICLE_RADIUS 0.005f

uniform int Number_Particles;
uniform mat4 m_model;

uniform float H;



layout(std430, binding = 0) buffer Position
{
    vec4 position[];
};

layout(std430, binding = 1) buffer TempPosition
{
    vec4 tempPosition[];
};

layout(std430, binding = 2) buffer Velocity
{
    vec4 velocity[];
};

layout(std430, binding = 3) buffer TempVelocity
{
    vec4 tempvelocity[];
};

layout(std430, binding = 4) buffer TempBucketSizes
{
    int tempBucketSizes[];
};


uint hashFunction(vec4 pos,double H,int size) {
    
    int p1 = 2693;
    int p2 = 3163;
    int p3 = 4091;

    int part1 = (int((pos.x / H)) * p1);
    int part2 = (int((pos.y / H)) * p2);
    int part3 = (int ((pos.z / H)) * p3);
    
    uint ret = uint((part1 ^ part2 ^ part3) % size);
    
    return ret;
}

void main()
{
    
    uint index = gl_GlobalInvocationID.x;

    tempPosition[index] = position[index];
        
    uint newbucket =hashFunction(tempPosition[index], H,1000); 
    
    
    atomicAdd(tempBucketSizes[newbucket],1);
    

    tempvelocity[index]= velocity[index];



}