#version 430


#define WORK_GROUP_SIZE_X 32
#define WORK_GROUP_SIZE_Y 32
#define WORK_GROUP_SIZE_Z 1

layout (local_size_x = 32,local_size_y = 1) in;


layout(std430, binding = 1) buffer Position
{
    vec4 ParticlePos[];
};
layout(std430, binding = 2) buffer Velocity
{
    vec4 Vel[];
};

layout(r16f,binding = 3) uniform image3D voxelRep;
layout(r16f,binding = 2) uniform image3D voxelRepAux;

uniform int voxDim;

float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}



uniform vec3 voxdimvec;
uniform vec3 simmin;
uniform vec3 simmax;
uniform vec3 voxmin;
uniform vec3 voxmax;

uniform float particleradius;

void main(){    
    vec3 fpos = ParticlePos[gl_GlobalInvocationID.x].xyz; 
    fpos = (fpos - voxmin) / (voxmax-voxmin);
    fpos *= voxdimvec;
    
    ivec3 pos = ivec3(fpos.xyz);

    vec3 worldposcenter = (voxmax-voxmin)*(pos/voxdimvec) + voxmin ;
    
    float particlerad = particleradius;
    ivec3 side = ivec3(ceil(voxdimvec*(particlerad/(voxmax-voxmin))));
    //ivec3 side = ivec3(2);
    for(int i = -side.x; i <= side.x; i++){
       for(int j = -side.y; j <= side.y; j++){
            for(int k = -side.z; k <= side.z; k++){

                vec3 worldpos = (voxmax-voxmin)*((pos+ivec3(i,j,k))/voxdimvec) + voxmin ;
                
                float dit = distance(worldpos,worldposcenter);
                if(dit <= particlerad){
                        imageStore(voxelRepAux, pos+ivec3(i,j,k), vec4(1.0) );
                }
            }
        } 
    }
}
