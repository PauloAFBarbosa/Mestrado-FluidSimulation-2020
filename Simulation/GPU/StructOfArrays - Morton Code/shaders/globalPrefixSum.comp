#version 460

#define WORK_GROUP_SIZE 10

layout (local_size_x = WORK_GROUP_SIZE) in;

#define PARTICLE_RADIUS 0.005f
#define TILE_SIZE 100
#define NUMBER_OF_THREADS 2160



uniform int Number_Particles;
uniform mat4 m_model;

uniform float MASS;
uniform float RESTDENSITY;
uniform int HASHSIZE;
uniform int PONTOS_LADO;
uniform float H;




layout(std430, binding = 0) buffer Histogram
{
    int histogram[];
};
layout(std430, binding = 1) buffer PrefixSum
{
    int prefixSum[];
};
layout(std430, binding = 2) buffer UseTemp
{
    int useTemp[];
};



void main()
{
    
    //index refere-se ao digito que vamos tratar
    uint index = gl_GlobalInvocationID.x;
    
    uint max =0;
    
    if (index > Number_Particles)
        return;

    uint last = index + (10*(NUMBER_OF_THREADS -1));

    //zero buffer
    prefixSum[last] =0;
    
    
    for(uint i = index ; i < NUMBER_OF_THREADS * 10; i+=10){
        //o prefix sum de uma thread no digito x Ã© igual ao seu valor atual nesse thread mais o valor desse digito na thread anterior
        prefixSum[last] += histogram[i];
    }

    

}