// Copyright (c) 2017-2018, Samuel Ivan Gunadi
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#version 460

#define WORK_GROUP_SIZE 32

layout (local_size_x = WORK_GROUP_SIZE) in;

// constants

#define TIME_STEP 0.0001f

#define WALL_SIZEX 0.5
#define WALL_SIZEZ 0.5

uniform int Number_Particles;
uniform int Pause;
uniform int Flow;
uniform float WALL_DAMPING;
uniform float time;
uniform float XMAX;
uniform float YMAX;
uniform float ZMAX;

uniform float XMIN;
uniform float YMIN;
uniform float ZMIN;


uniform float RESTITUTION;
uniform float TIMESTEP;
uniform vec4 GRAVITY;


uniform int COLLISIONTYPE;
uniform int computeGravity;

uniform sampler2D river;

layout(std430, binding = 0) buffer Position
{
    vec4 position[];
};

layout(std430, binding = 1) buffer Velocity
{
    vec4 velocity[];
};

layout(std430, binding = 2) buffer Force
{
    vec4 force[];
};

layout(std430, binding = 3) buffer Density
{
    float density[];
};



layout(std430, binding = 4) buffer Acceleration
{
    vec4 acceleration[];
};

layout(std430, binding = 5) buffer Gravity
{
    vec4 gravity[];
};



layout(std430, binding = 6) buffer SurfaceTension
{
    vec4 surfaceTension[];
};

layout(std430, binding = 7) buffer Viscosity
{
    vec4 viscosity[];
};

layout(std430, binding = 8) buffer Debug
{
    vec4 debug[];
};

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

bool detectCollisionV2(in vec4 oldPos,in vec4 pos,in vec4 vel,in uint index,out int hitBall, out vec4 contactPoint, out vec4 unitSurfaceNormal,out vec4 retVelocity) {
    

    vec2 textPos = vec2(map(pos.x,XMIN,XMAX,0.01,0.99),map(pos.z,ZMIN,ZMAX,0.01,0.99));
    
    

    float newy = YMIN + texture(river, textPos).x;

    //debug[index] = vec4 (pos.y,newy,0.0457,texture(river, vec2(0.5,0.5)).x);

    if (pos.x <= XMAX && pos.x >= XMIN && pos.y <= YMAX && pos.y >= newy && pos.z <= ZMAX && pos.z >= ZMIN){
        
        
            contactPoint=pos;
            retVelocity=vel;
            hitBall=0;
            return false;
    }


    contactPoint = pos;

    unitSurfaceNormal= vec4(0);

    int zx =0;
    retVelocity=vel;

    int collision =0;

    if (pos.x < XMIN) {

        if (Flow==0){
            zx=1;
            collision=1;
            contactPoint.x = XMIN;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(1,0,0,0));
        }
        else{
            contactPoint =vec4(0.6,pos.y+0.2,ZMIN+0.01,0);
                retVelocity = vec4(0,0,1,0);
                return false;
        }
        
            

            
            
    }
    else if (pos.x > XMAX) {

        if (Flow==0){
            collision=1;
            zx=1;
            contactPoint.x = XMAX;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(-1,0,0,0));
        }
        else{
            contactPoint =vec4(0.5,pos.y+0.1,ZMIN+0.01,0);
                retVelocity = vec4(0,0,1,0);
                return false;
        }
        
            

    }
    if (pos.y < newy) {
        collision=1;
            contactPoint.y =newy;
            //compute normal
            float tstep =0.001;
            vec4 p=pos;
            vec3 top =vec3(p.x,0,p.z+tstep);
            vec2 temp = vec2(map(top.x,XMIN,XMAX,0.01,0.99),map(top.z,ZMIN,ZMAX,0.01,0.99));
            top.y = texture(river, vec2(temp.x,temp.y)).x;

            vec3 bot = vec3(p.x,0,p.z-tstep);
            temp = vec2(map(bot.x,XMIN,XMAX,0.01,0.99),map(bot.z,ZMIN,ZMAX,0.01,0.99));
            bot.y= texture(river,vec2(temp.x,temp.y)).x;
            
            vec3 left = vec3(p.x-tstep,0,p.z); 
            temp = vec2(map(left.x,XMIN,XMAX,0.01,0.99),map(left.z,ZMIN,ZMAX,0.01,0.99));
            left.y= texture(river,vec2(temp.x,temp.y)).x;
            
            vec3 right = vec3(p.x+tstep,0,p.z); 
            temp = vec2(map(right.x,XMIN,XMAX,0.01,0.99),map(right.z,ZMIN,ZMAX,0.01,0.99));
            right.y= texture(river,vec2(temp.x,temp.y)).x;

            vec3 v1 = normalize(top-bot);
            vec3 v2 = normalize(left - right);

            vec3 result =normalize(cross(v2,v1));


            //debug[index] = vec4(result.x,result.y,result.z,0);

            //unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(result.x,result.y,result.z,0));
            
            unitSurfaceNormal = vec4(result.x,result.y,result.z,0);
            
        }
        else if (pos.y > YMAX) {
            collision=1;
            contactPoint.y =YMAX;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,-1,0,0));
            
            
        }
        
    
        if (pos.z < ZMIN) {
            collision=1;
            zx=1;
            contactPoint.z =ZMIN;
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,0,1,0));
            
            
            
        }
        else if (pos.z > ZMAX) {

            if (Flow ==0){
                collision=1;
                zx=1;
                contactPoint.z =ZMAX;
                unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,0,-1,0));    
            }
            else{
                contactPoint =vec4(pos.x-0.6,pos.y,ZMIN+0.01,0);
                retVelocity = vel;
                return false;
            }

        }

        
        
        float penetrationDepth = length(pos - contactPoint);
        if (COLLISIONTYPE == 0 && collision==1)
            retVelocity= vel-(2) * dot(unitSurfaceNormal, (vel))*unitSurfaceNormal;
        else if (collision==1)
            retVelocity= vel -  (1+RESTITUTION *(penetrationDepth/(TIMESTEP*length(vel)))) * dot(unitSurfaceNormal, vel)*unitSurfaceNormal;
        //retVelocity *= RESTITUTION;
        
        //
        
        //retVelocity=retVelocity*RESTITUTION;
        hitBall=0;
        
        return true;
}

bool detectCollisionV3(in vec4 oldPos,in vec4 pos,in vec4 vel,in uint index,out int hitBall, out vec4 contactPoint, out vec4 unitSurfaceNormal,out vec4 retVelocity) {

    vec2 textPos = vec2(map(pos.z,ZMIN,ZMAX,0.01,0.99),map(pos.x,XMIN,XMAX,0.01,0.99));
    

    float newy = YMIN + texture(river, textPos).x;

    contactPoint = pos;

    unitSurfaceNormal= vec4(0);

    int zx =0;
    retVelocity=vel;

    int collision =0;
    if (pos.x < XMIN) {
        zx=1;
        collision =1;
            contactPoint.x = XMIN;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(1,0,0,0));
            

            
            
    }
    else if (pos.x > XMAX) {
        zx=1;
        collision =1;
            contactPoint.x = XMAX;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(-1,0,0,0));
            

    }
    if (pos.y > YMAX) {
        collision =1;
            contactPoint.y =YMAX;
            
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,-1,0,0));
            
            
        }
        else if (pos.y < newy){
            contactPoint.y =newy;
            //compute normal
            float tstep =0.001;
            vec3 top =vec3(textPos.x,0,textPos.y+tstep);
            top.y = texture(river, vec2(textPos.x,textPos.y+tstep)).x;

            vec3 bot = vec3(textPos.x,0,textPos.y-tstep);
            bot.y= texture(river,vec2(textPos.x,textPos.y-tstep)).x;
            
            vec3 left = vec3(textPos.x-tstep,0,textPos.y); 
            left.y= texture(river,vec2(textPos.x-tstep,textPos.y)).x;
            
            vec3 right = vec3(textPos.x+tstep,0,textPos.y); 
            right.y= texture(river,vec2(textPos.x+tstep,textPos.y)).x;

            vec3 v1 = normalize(top-bot);
            vec3 v2 = normalize(left - right);

            vec3 result =normalize(cross(v2,v1));

            

            //unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(result.x,result.y,result.z,0));
            
            unitSurfaceNormal = vec4(result.x,result.y,result.z,0);
        }
        
    
        if (pos.z < ZMIN) {
            collision =1;
            zx=1;
            contactPoint.z =ZMIN;
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,0,1,0));
            
            
            
        }
        else if (pos.z > ZMAX) {
            collision =1;
            zx=1;
            contactPoint.z =ZMAX;
            unitSurfaceNormal = normalize(unitSurfaceNormal+vec4(0,0,-1,0));
            
             
        }

        
        float penetrationDepth = length(pos - contactPoint);
        if (COLLISIONTYPE == 0 && collision ==1)
            retVelocity= vel-(2) * dot(unitSurfaceNormal, (vel))*unitSurfaceNormal;
        else if (collision ==1)
            retVelocity= vel -  (1+RESTITUTION *(penetrationDepth/(TIMESTEP*length(vel)))) * dot(unitSurfaceNormal, vel)*unitSurfaceNormal;
        //retVelocity *= RESTITUTION;
        
        //
        
        //retVelocity=retVelocity*RESTITUTION;
        hitBall=0;
        
        return true;
}




void updateVelocity(vec4 velocity, vec4 unitSurfaceNormal, float penetrationDepth, out vec4 ret) {
    //ret = velocity - unitSurfaceNormal * (1 + RESTITUTION * penetrationDepth / (TIMESTEP * glm::length(velocity))) * glm::dot(velocity, unitSurfaceNormal);
    
    ret= velocity -  (2) * dot(unitSurfaceNormal, normalize(velocity))*unitSurfaceNormal;
}

void updateVelocityV2(vec4 velocity, vec4 unitSurfaceNormal, float penetrationDepth, out vec4 ret) {
    //ret = velocity - unitSurfaceNormal * (1 + RESTITUTION * penetrationDepth / (TIMESTEP * glm::length(velocity))) * glm::dot(velocity, unitSurfaceNormal);
    
    ret= velocity -  (1+RESTITUTION *(penetrationDepth/(TIMESTEP*length(velocity)))) * dot(unitSurfaceNormal, normalize(velocity))*unitSurfaceNormal;
}



void main()
{
    if (Pause == 1)
        return;
    uint index = gl_GlobalInvocationID.x;

    if (index > Number_Particles)
        return;

    vec4 totalForce= vec4(0);

    //retirado surfaceTension
    // aqui se tiver GRAVITY * density cada particula vai ter uma gravidade diferente, e assim as de baixo sofrem mais gravidade (visto que tem mais gravidade)
    
    if (computeGravity==0)
        totalForce = force[index] + viscosity[index] + GRAVITY * 1000 + surfaceTension[index];
    else
        totalForce = force[index] + viscosity[index] + GRAVITY * density[index]+ surfaceTension[index];
    

    //employEulerIntegrator
    vec4 acc= (totalForce / density[index]);

    vec4 oldPosition = position[index];
    /*
    if(oldPosition.y < (-1.9)){
        velocity[index].y=0;        
        acc.y=0;

    }

    if(oldPosition.x < (-2.07)){
        velocity[index].x=0;        
        acc.x=0;
    }

    if(oldPosition.x > (2.07)){
        velocity[index].x=0;        
        acc.x=0;
    }

    if(oldPosition.z < (-2.8)){
        velocity[index].z=0;        
        acc.z=0;
    }

    if(oldPosition.z > (2.8)){
        velocity[index].z=0;        
        acc.z=0;
    }
    */

    vec4 vel = velocity[index]+ acc * TIMESTEP;
    
    
    vec4 pos = oldPosition + vel * TIMESTEP;
    /*
    if(pos.y < (-1.9)){
        pos.y=-1.85;
    }

    if(pos.x < (-2.07)){
        pos.x=0;
    }

    if(pos.x > (2.07)){
        pos.x=0;
    }

    if(pos.z < (-2.8)){
        pos.z=0;
    }

    if(pos.z > (2.8)){
        pos.z=0;
    }
    */
    vec4 contactPoint= vec4(0);
    vec4 unitSurfaceNormal= vec4(0);
    vec4 retVelocity= vec4(0);
    //usado para saber se entrou em colisão com a bola, para aumentar o RESTITUTION
    int hitball=0;
    bool retcolision = detectCollisionV2(oldPosition,pos,vel,index,hitball, contactPoint, unitSurfaceNormal,retVelocity);

    position[index]=contactPoint;
    velocity[index]=retVelocity;
    if (retcolision==true)
        velocity[index]*=0.99;

    
}